package stpaverifier.controller.preferences;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.Assert;
import org.eclipse.jface.preference.IPreferenceStore;

import stpaverifier.controller.preferences.spin.SpinPreferenceConstants;
import stpaverifier.model.properties.ModelProperty;


/**
 * this class provides static methods to store and manage the preferences for the command line
 * arguments of the spin model checker, therefore it uses the eclipse preference framework  
 * @author Lukas Balzer
 * @since 1.0.0
 *
 */
public class SpinArgumentHandler implements SpinPreferenceConstants{

	private static final IPreferenceStore store = STPAVerifierPreferenceRegistry.store;
	
	private static String getSpinCommand(){
		String command = store.getString(PREF_SPIN_PATH);
		if(command.isEmpty()){
			return null;
		}
//		else if(!System.getProperty("os.name").toLowerCase().contains("win")){
//			command = "./" + command;
//		}
		return command;
	}
	
	public static void loadDefaults(){
		store.setValue(PREF_SPIN_INT_DMA_N, store.getDefaultInt(PREF_SPIN_INT_DMA_N));
		store.setValue(PREF_SPIN_INT_DVECTORSZ, store.getDefaultInt(PREF_SPIN_INT_DVECTORSZ));
		store.setValue(PREF_SPIN_INT_DMEMLIM, store.getDefaultInt(PREF_SPIN_INT_DMEMLIM));
		store.setValue(PREF_SPIN_BOOL_DNOCLAIM, store.getDefaultBoolean(PREF_SPIN_BOOL_DNOCLAIM));
		store.setValue(PREF_SPIN_BOOL_DCOLLAPSE, store.getDefaultBoolean(PREF_SPIN_BOOL_DCOLLAPSE));
		store.setValue(PREF_SPIN_BOOL_DXUSAFE, store.getDefaultBoolean(PREF_SPIN_BOOL_DXUSAFE));
		store.setValue(PREF_SPIN_BOOL_DSAFETY, store.getDefaultBoolean(PREF_SPIN_BOOL_DSAFETY));
		
		store.setValue(PREF_SPIN_INT_RUN_MAX, store.getDefaultInt(PREF_SPIN_INT_RUN_MAX));
	}
	
	/**
	 * this static function writes an command array for generating a spin verifier out of a model
	 * file laying in the given path combined with an optional property value,
	 * if null is given as property than only a verifier for the model itself is generated
	 * 
	 * @param path the path in which the model file is located on the system, must not be <i>null
	 * @param property the property which will integrated in the verifier,
	 * 				   for no property an object of <code>ModelProperty</code> is expected
	 * @return an array with the command and its arguments
	 */
	public static String[] getSpinArguments(String path,String property){
		Assert.isNotNull(path);
		List<String> commandList =new ArrayList<>();
		String spinEXE =getSpinCommand();
		if(spinEXE == null || spinEXE.isEmpty()){
			return null;
		}else{
			commandList.add(spinEXE);
		}
		if(property != null && !property.contains(ModelProperty.NULL_SID)){
			/*
			 * the -f option converts the ltl property into a never claim that means a claim that should
			 * never become true so the property must be negated be passing it via -f
			 */
			commandList.add("-f");
			commandList.add("!("+property+")");
			
		}
		commandList.add("-a");
		commandList.add("-lm");
		commandList.add(path);
		return commandList.toArray(new String[0]);
		
	}
	
	/**
	 * Writes the command array for compiling the verifier generated by spin
	 * and includes the compile time arguments stored in the plugin's preferences
	 *  
	 * @return an array which contains the compiler command to be used and all compile arguments available
	 */
	public static String[] getCompilerArguments(){
		List<String> commandList =new ArrayList<>();
		String ccCMD = store.getString(PREF_C_PATH);
		if(ccCMD.isEmpty()){
			return null;
		}
		commandList.add(ccCMD);
		
//		else{
//			commandList.add("./" + ccCMD);
//		}
		commandList.add("-DMEMLIM=" + getIntegerArg(PREF_SPIN_INT_DMEMLIM));
		commandList.add("-O2");
		
		if(getBooleanArg(PREF_SPIN_BOOL_DXUSAFE)){
			commandList.add("-DXUSAFE");
		}
		if(getBooleanArg(PREF_SPIN_BOOL_DSAFETY)){
			commandList.add("-DSAFETY");
		}
		commandList.add("-DMA=" + getIntegerArg(PREF_SPIN_INT_DMA_N));
		if(getBooleanArg(PREF_SPIN_BOOL_DCOLLAPSE)){
			commandList.add("-DCOLLAPSE");
		}
		commandList.add("-DVECTORSZ=" + getIntegerArg(PREF_SPIN_INT_DVECTORSZ));
		
		//the default compiler options to set the in- and output name
		commandList.add("-w");
		commandList.add("-o");
		commandList.add("pan");
		commandList.add("pan.c");
		commandList.add("-lm");
		return commandList.toArray(new String[0]);
	}
	
	/**
	 * Writes the command array for running the model checker stored as <code>pan</code>
	 * and includes runtime options like the search depth
	 * 
	 * @param path the path in which spin has created the model verifier program
	 * @return an array which contains the program to be executed and all runtime arguments 
	 */
	public static String[] getRunArguments(String path){
		List<String> commandList =new ArrayList<>();
			commandList.add(path+File.separator+"pan");
		if(!store.getBoolean(PREF_SPIN_BOOL_DSAFETY)){
			commandList.add("-a");
		}
		commandList.add("-n");
		commandList.add("-m" + getIntegerArg(PREF_SPIN_INT_RUN_MAX));
		return commandList.toArray(new String[0]);
	}
	
	/**
	 * Writes the command array for running pml.trail error path to get the counterexample
	 * 
	 * @param path the path in which spin has created the model verifier program
	 * @return an array which contains the program to be executed and all arguments needed for the replay
	 */
	public static String[] getReplayArguments(String path){
		List<String> commandList =new ArrayList<>();
		commandList.add(path+File.separator+"pan");
		
		commandList.add("-r");
		return commandList.toArray(new String[0]);
	}
	/**
	 * @param constant the Constant in which the preference value is stored
	 * @return the preference value as a string
	 */
	public static int getIntegerArg(String constant) {
		return store.getInt(constant);
	}
	
	public static void setIntegerPref(String constant, String pref){
		int value = Integer.parseInt(pref);
		store.setValue(constant, value);
	}
	
	/**
	 * @param constant the Constant in which the preference value is stored
	 * @return the preference value as a string
	 */
	public static boolean getBooleanArg(String constant) {
		return store.getBoolean(constant);
	}
	

	public static void setBooleanPref(String constant, String pref){
		store.setValue(constant, pref);
	}

}
