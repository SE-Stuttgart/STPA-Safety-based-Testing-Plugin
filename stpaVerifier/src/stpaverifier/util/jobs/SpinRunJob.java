package stpaverifier.util.jobs;

import java.io.File;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;

import stpaverifier.controller.IProperty;
import stpaverifier.controller.model.STPAVerifierController;
import stpaverifier.controller.preferences.SpinArgumentHandler;
import stpaverifier.util.SpinCMDScanner;

/**
 *  
 * @author Lukas Balzer
 * @since 1.0.0
 *
 */
public class SpinRunJob extends SpinCMDScanner {

	
	public SpinRunJob(String name, STPAVerifierController dataModelController, IProperty formular) {
		super(name,dataModelController, formular);
	}
	
	@Override
	protected IStatus run(IProgressMonitor monitor) {

		if(getModel() == null){
			return Status.CANCEL_STATUS;
		}

		IFile modelResource = getModelResource();
		String modelPath = modelResource.getLocation().toOSString();
		File workinPath = new File(modelResource.getProject().getLocation().toOSString());
		/*
		 * 1. STEP generate the verifier with -a and add the property which should be checked
		 * 
		 */
			int state = inheritIO(modelResource.getParent(),
					  SpinArgumentHandler.getSpinArguments(modelPath, getProperty()),
					  getConsole(), 0);
			if((state & (IProperty.STATE_CANCELED | IProperty.STATE_SYNTAX_ERROR)) != 0){
				getModel().setPropertyState(getPropertyID(), state);

				return Status.CANCEL_STATUS;
			}else if(state == STATE_ERROR){
				getModel().setPropertyState(getPropertyID(),IProperty.STATE_CANCELED);
				return Status.CANCEL_STATUS;
			}
			
		/*
		 * 2. STEP Compile the c-Code stored by spin with the given c compiler 
		 * add all Compile time options
		 * gcc -DMEMLIM=1024 -DXUSAFE -DMA=1520  -DCOLLAPSE  -DVECTORSZ=2048 -o pan pan.c
		 */
			state = inheritIO(modelResource.getParent(),
					  SpinArgumentHandler.getCompilerArguments(),
					  getConsole(), 0);
			if((state & (IProperty.STATE_CANCELED | IProperty.STATE_SYNTAX_ERROR)) != 0){
				getModel().setPropertyState(getPropertyID(), state);
				
				return Status.CANCEL_STATUS;
			}else if(state == STATE_ERROR){
				getModel().setPropertyState(getPropertyID(),IProperty.STATE_CANCELED);
				return Status.CANCEL_STATUS;
			}
		/*
		 * 3.STEP execute the verifier program generated by the compiler
		 */
			state = inheritIO(modelResource.getParent(),
								  SpinArgumentHandler.getRunArguments(workinPath.getAbsolutePath()),
								  getConsole(), 0);
			if(state == STATE_ERROR){
				getModel().setPropertyState(getPropertyID(),IProperty.STATE_CANCELED);
				return Status.CANCEL_STATUS;
			}
			getModel().addResult(getVerifyResult());
			if(state == IProperty.STATE_COUNTEREXAMPLE){
				inheritIO(modelResource.getParent(),
						  SpinArgumentHandler.getReplayArguments(workinPath.getAbsolutePath()),getConsole(),IProperty.STATE_COUNTEREXAMPLE);
			}
			if((state & IProperty.STATE_CANCELED) != 0){
				return Status.CANCEL_STATUS;
			}
			getModel().setPropertyState(getPropertyID(), state);
		
		return Status.OK_STATUS;
	}


	
}
